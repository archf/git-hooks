#!/bin/bash

die_with_status () {
	local status=$1
  shift; printf >&2 '%s\n' "$*"; exit "$status"
}

die() { die_with_status 1 "$@"; }

# check if invoked while in a git dir
GITDIR=$(git rev-parse --git-dir)
if [[ ! $? -eq 0 ]]; then
  die "git hooks commands must be run inside a git repository...aborting"
fi

function _validate_templatedir {
  # retrieve templatedir path
  TEMPLATEDIR=$(git config --global --get init.templatedir)
  if [[ $? != 0 ]]; then
    die "No 'init.templatedir' option found in your gitconfig!"
  fi
  FILES=($(eval find ${TEMPLATEDIR}/hooks -type f))
}

function _show {
  _validate_templatedir
  echo "List of hooks found in 'templatedir': "
  printf '%s\n' "${FILES[@]}"
}

function _install {
  _validate_templatedir

  # creating a .git/hooks and .git/hooks.old directory
  mkdir -p $GITDIR/hooks
  mkdir -p $GITDIR/hooks.old

  for FILE in "${FILES[@]}"; do
    f="${FILE##*/}"
    if [[ -f ${GITDIR}/hooks.old/${f}  && ! $FORCE ]]; then
      echo "${GITDIR}/hooks/${f} was found in ${GITDIR}/hooks.old... skipping"
    else
      echo "backup '${GITDIR}/hooks/${f}' to '${GITDIR}/hooks.old/'"
      [[ -f ${GITDIR}/hooks/${f} ]] && cp ${GITDIR}/hooks/${f} ${GITDIR}/hooks.old/${f}
      install --mode=775 ${FILE} ${GITDIR}/hooks/${f}
      [[ $? ]] && echo "${f} hook installed to '${GITDIR}/hooks/${f}'!"
    fi
  done
}

function _restore {
  echo "attempting to restore hooks found in '.git/hooks.old'..."
  if [[ ! -d ${GITDIR}/hooks.old ]]; then
    die "Error: missing ${GITDIR}/hooks.old/${GITDIR}/hooks.old! Nothing to \
    restore..."
  fi
  for FILE in $FILES; do
    f=$(basename $FILE)
    if [[ -f ${GITDIR}/hooks.old/${f} ]]; then
      echo "${f} was found in hooks.old... restoring"
      mv ${GITDIR}/hooks.old/${f} ${GITDIR}/hooks
    else
      echo "${f} is not available to be restore. This hook has never been
      backed up in the first time"
    fi
  done
  echo "... all done!"
}

function _help() { echo "${__doc__:-No usage available}" 1>&2; }

__doc__="\
GIT HOOKS
  A custom git command to manage git repository hooks.
  See https://github.com/archf/git-hooks.

USAGE
  git hooks [OPTIONS] CMD

OPTIONS
  -h|--help   Show this help menu.
  -f|--force  Force hook update.

CMD
  show        List git 'templatedir' available hooks.
  install     Install hooks found inside git 'templatedir' in repository.
              Current hooks are backed up to '.git/hooks.old'. If the hook is
              already found in '.git/hooks.old' it will be skipped unless you
              delete it manually or use the --force option.
  restore     Restore previous set of hooks from '.git/hooks.old'.
  help        Show this help menu.
"

while [ $# -gt 0 ]; do
  case $1 in
    install) cmd=install;;
    restore) cmd=restore;;
    -h|--help|help) cmd=help;;
    -f|--force) FORCE=true;;
    *) cmd=show;;
  esac
  shift
done

# run
_${cmd:-show}
