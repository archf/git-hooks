#!/bin/sh

# A simple script to manage your hooks.
#
## How it work!

#   Just like this:
#
#   i. lookup your .gitconfig for the templatedir parameter
#   i. if it does exist it will look for hooks in ${templatedir}/hooks
#   ii. for each file:
#     * a backup will be done in .git/hooks.old if it already exists in .git/hooks
#     * the file will be copied in .git.hooks:

# Why copy? Becauses it allows you to append a command at the end of one of
# your hooks to execute a scripts that exists in the repo you just cloned.

###############################################################################
### validations
###############################################################################

# check if invoked while in a git dir
GITDIR=$(git rev-parse --git-dir)
if [ ! $? -eq 0 ] ; then
  echo "git hooks commands must be run inside a git repository...aborting"
  exit 1
fi

# retrieve templatedir path
TEMPLATEDIR=$(git config --global --get init.templatedir)

if [ $? ]; then
  echo
  echo "found templatedir: ${TEMPLATEDIR}...ok"
  echo
  FILES="$(eval find ${TEMPLATEDIR}/hooks -type f)"
else
  echo "no templatedir found in your gitconfig"
fi

###############################################################################
### functions
###############################################################################

function show
{
  echo
  echo
  echo "List of hooks found in your templatedir: "
  echo
  echo "${FILES}"
  echo

  # show help menu
  help
}

function install
{

  # # validate that there are indeed hooks to install
  # [[ -n $FILES ]] || echo "Your hook folder '${TEMPLATEDIR}' is empty! There
  # are no hooks to be managed. Aborting installation." && exit 1

  echo "backing up hooks from templatedir if they already exists in .git/hooks"

  # creating a .git/hooks and .git/hooks.old directory if not already existing
  mkdir -p $GITDIR/hooks
  mkdir -p $GITDIR/hooks.old

  for FILE in $FILES;
  do
    f=$(basename $FILE)
    if [ -f ${GITDIR}/hooks.old/${f} ] ; then
      echo "${f} was found in hooks.old... skipping"
    else
      [[ -f ${GITDIR}/hooks/${f} ]] && mv ${GITDIR}/hooks/${f} ${GITDIR}/hooks.old/${f}
      cp ${FILE} ${GITDIR}/hooks/${f}
      chmod +x ${GITDIR}/hooks/${f}
      [ $? ] && echo "${f} hook installed"
    fi
  done

  echo "... all done!"
}

function restore
{
  echo "attempting to restore hooks found in hooks.old..."
  if [ ! -d ${GITDIR}/hooks.old ] ; then
    echo "Error: missing hooks.old, no previous hooks to restore"
    exit 1
  fi

  for FILE in $FILES;
  do
    f=$(basename $FILE)
    if [ -f ${GITDIR}/hooks.old/${f} ] ; then
      echo "${f} was found in hooks.old... restoring"
      mv ${GITDIR}/hooks.old/${f} ${GITDIR}/hooks
    else
      echo "${f} is not available to be restore. This hook has never been
      backed up in the first time"
    fi
  done

  echo
  echo "... all done!"
}

function help
{
  echo 'git hooks'
  echo '    A custom git command to managed the personal hooks of a user'
  echo '    see https://github.com/archf/bin'
  echo
  echo "   (no command) Default behavior is to show the list of hooks"
  echo "                 found in the sure templatedir and show this help"
  echo
  echo 'commands:'
  echo
  echo 'git hooks (install | restore )'
  echo
  echo '    install     Install hooks found in a templatedir into a given repo'
  echo '                  The command should be run from inside the repo'
  echo '                  Any found hooks are moved to .git/hooks.old'
  echo
  echo "    restore     Restore hooks moved to .git/hooks.old back to hooks"
  echo
  echo "    -h |--help  Show this help menu"
}

###############################################################################
### cli parsing
###############################################################################
case $1 in
  install )
    install
    ;;
  restore )
    restore
    ;;
  -h|--help )
    help
    ;;
  * )
    show
    ;;
esac
